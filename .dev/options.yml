activate:
  __default: true
  __desc:
    en: |-
      Enable the plugin.
      You can toggle it anytime with the `:AutoInputSwitch on|off` command.
    ja: |-
      プラグインを有効にする。
      `:AutoInputSwitch on|off` コマンドでいつでも切り替えることができます。

async:
  __default: false
  __desc:
    en: |-
      Run shell commands (`cmd_get` / `cmd_set`) asynchronously?
        * false: Run synchronously (recommended).
                 May cause slight lag if you switch rapidly between Insert and Normal mode.
        *  true: Run asynchronously. Removes lag but may be less reliable.
    ja: |-
      シェルコマンド (`cmd_get` / `cmd_set`) の実行を非同期で行う？
        * false: 同期実行（推奨）。
                 Insert と Normal モードを素早く切り替えた際などに僅かなラグが発生する可能性があります。
        *  true: 非同期実行。ラグはありませんが、動作がやや不安定です。
log:
  __default: false
  __desc:
    en: |-
      Output logs to a file?
      Useful for debugging `cmd_get` / `cmd_set`.
      The log file is cleared every time `setup()` is called.

      Log file path:
        * Linux/macOS: ~/.local/state/nvim/auto-input-switch.log
        *     Windows: ~/AppData/Local/nvim-data/auto-input-switch.log
    ja:

prefix:
  __default: AutoInputSwitch
  __desc:
    en: |-
      Prefix for command names.
      If you prefer shorter commands, set this to something like 'AIS'.
    ja:

popup:
  __desc:
    en: When the plugin switches the input method, it can notify you with a popup.
    ja:

  enable:
    __default: true
    __desc:
      en: Show popups?
      ja:

  duration:
    __default: 1500
    __desc:
      en: How long the popup remains visible (ms).
      ja:

  pad:
    __default: true
    __desc:
      en: Add leading and trailing spaces in popup text.
      ja:

  hl_group:
    __default: PmenuSel
    __desc:
      en: Highlight group for the popup window.
      ja:

  window:
    __desc:
      en: Popup window configuration (:h nvim_open_win()).
      ja:

    border:
      __default: none
      __desc:
        en: Border style.
        ja:

    zindex:
      __default: 50
      __desc:
        en: Rendering priority (higher = drawn on top).
        ja:

    row:
      __default: 1
      __desc:
        en: Horizontal offset from the anchor.
        ja:

    col:
      __default: 0
      __desc:
        en: Vertical offset from the anchor.
        ja:

    relative:
      __default: cursor
      __desc:
        en: |-
          Origin of the offsets.
          One of: 'editor', 'win', 'cursor', or 'mouse'.
        ja:

    anchor:
      __default: NW
      __desc:
        en: |-
          Corner used to anchor the popup.
            * 'NW': Northwest
            * 'NE': Northeast
            * 'SW': Southwest
            * 'SE': Southeast
        ja:

  labels:
    __desc:
      en: Popup label texts for various input methods.
      ja:

    normal_input:
      __default: A
      __desc:
        en: Popup text for Normalize. Set false to disable.
        ja:

    lang_inputs:
      __desc:
        en: Popup texts for Restore and Match.
        ja:

      Ja:
        __default: あ
        __desc:
          en: Popup text for Japanese input.
          ja:

      Zh:
        __default: 拼
        __desc:
          en: Popup text for Chinese input.
          ja:

      Ko:
        __default: 한
        __desc:
          en: Popup text for Korean input.
          ja:

normalize:
  __desc:
    en: |-
      Outside Insert mode, the plugin can force the input method to Latin.
      This feature is called "Normalize".
    ja:

  enable:
    __default: true
    __desc:
      en: Enable Normalize?
      ja:

  on:
    __default:
      - BufLeave
      - WinLeave
      - FocusGained
      - ExitPre
      - QuitPre

    __desc:
      en: Events that trigger Normalize (:h events).
      ja:

  on_mode_change:
    __default:
      - '[iR]:n'

    __desc:
      en: |-
        Mode transition patterns that trigger Normalize.
        If not false, Normalize is triggered by the 'ModeChanged' event.
        See:
          * :h autocmd-pattern
          * :h ModeChanged
          * :h mode()

        Default:
          '[iR]:n' (From Insert/Replace to Normal mode)
      ja:

  filetypes:
    __default: '*'
    __desc:
      en: |-
        Filetypes where Normalize is enabled.
        Example:
          filetypes = { 'markdown', 'text' },
      ja:

  debounce:
    __default: 500
    __desc:
      en: Debounce time (ms). Prevents repeated Normalize triggers.
      ja:

  buf_condition:
    __default: null
    __desc:
      en: |-
        Optional function that decides whether Normalize is enabled for a buffer.
        Called on each buffer creation with its buffer number.
        Return true to enable Normalize for that buffer.
        Example:
          -- Enable only in listed buffers
          buf_condition = function(buf)
            return vim.bo[buf].buflisted
          end,
      ja:

restore:
  __desc:
    en: |-
      When Normalize is about to run, the plugin saves the current input method.
      When you next enter Insert or Replace mode, it restores that input method.
      This feature is called "Restore".
    ja:

  enable:
    __default: true
    __desc:
      en: Enable Restore?
      ja:

  on:
    __default:
      - FocusGained

    __desc:
      en: Events that trigger Restore (:h events).
      ja:

  on_mode_change:
    __default:
      - 'n:[iR]'

    __desc:
      en: |-
        Mode transitions that trigger Restore.
        Default: 'n:[iR]' (From Normal to Insert/Replace mode)
      ja:

  filetypes:
    __default: '*'
    __desc:
      en: |-
        Filetypes where Restore is enabled.
        Example:
          filetypes = { 'markdown', 'text' },
      ja:

  debounce:
    __default: 500
    __desc:
      en: Debounce time (ms). Prevents repeated Restore triggers.
      ja:

  buf_condition:
    __default: null
    __desc:
      en: |-
        Function that decides whether Restore is enabled for a buffer.
        Called on every buffer creation.
        By default, returns true if the buffer is 'modifiable'.
        You can override this or disable it by setting false.
      ja:

  exclude_pattern:
    __default: '<!CODE>[==[[-+a-zA-Z0-9@#$%^&/\\¥=~<>(){}\[\];:`]]==]'
    __desc:
      en: |-
        Regex pattern checked before Restore runs.
        If nearby characters match this, Restore is canceled.
        Default: matches alphanumerics and common punctuation.
        Set false to disable this check.
      ja:

match:
  __desc:
    en: |-
      Detects the language of nearby characters on Insert/Replace mode entry
      and switches to the matching input method.
      This feature is called "Match".
      If Match and Restore trigger together, Match takes priority.
      Disabled by default.
    ja:

  enable:
    __default: false
    __desc:
      en: Enable Match?
      ja:

  on:
    __default:
      - FocusGained

    __desc:
      en: Events that trigger Match (:h events).
      ja:

  on_mode_change:
    __default:
      - '[nvV]:[iR]'

    __desc:
      en: |-
        Mode transitions that trigger Match.
        Default: '[nvV]:[iR]' (From Normal/Visual to Insert/Replace mode)
      ja:

  filetypes:
    __default: '*'
    __desc:
      en: |-
        Filetypes where Match is enabled.
        Example:
          filetypes = { 'markdown', 'text' },
      ja:

  debounce:
    __default: 500
    __desc:
      en: Debounce time (ms). Prevents repeated Match triggers.
      ja:

  buf_condition:
    __default: null
    __desc:
      en: |-
        Function that decides whether Match is enabled for a buffer.
        Called on buffer creation.
        By default, returns true if the buffer is 'modifiable'.
        You can override this or disable it by setting false.
      ja:

  languages:
    __desc:
      en: |-
        Languages to detect and match.
        Enable those you want to use.
        Each `pattern` must be a valid regex (Unicode ranges).
        Add custom languages if needed, and define them in `os_settings[OS].lang_inputs`.
      ja:

    Ru:
      __default:
        enable: false
        priority: 0
        pattern: '<!CODE>[==[[\u0400-\u04ff]]==]'

      __desc:
        en: Cyrillic range for Russian.
        ja:

    Ja:
      __default:
        enable: false
        priority: 0
        pattern: '<!CODE>[==[[\u3000-\u30ff\uff00-\uffef\u4e00-\u9fff]]==]'

      __desc:
        en: Unicode ranges for Japanese.
        ja:

    Zh:
      __default:
        enable: false
        priority: 0
        pattern: '<!CODE>[==[[\u3000-\u303f\u4e00-\u9fff\u3400-\u4dbf\u3100-\u312f]]==]'

      __desc:
        en: Unicode ranges for Chinese.
        ja:

    Ko:
      __default:
        enable: false
        priority: 0
        pattern: '<!CODE>[==[[\u3000-\u303f\u1100-\u11ff\u3130-\u318f\uac00-\ud7af]]==]'

      __desc:
        en: Unicode ranges for Korean.
        ja:

  lines:
    __desc:
      en: |-
        When the current line is empty or whitespace-only,
        Match searches nearby lines as well.
      ja:

    above:
      __default: 1
      __desc:
        en: Number of lines above to search.
        ja:

    below:
      __default: 1
      __desc:
        en: Number of lines below to search.
        ja:

    exclude_pattern:
      __default: '<!CODE>[==[^\s*([-+*:|>]|[0-9]+\.)\s]==]'
      __desc:
        en: |-
          Regex pattern for lines that stop language detection.
          Useful for Markdown lists or blockquotes.
          Set false to disable.
        ja:

os:
  __default: false
  __desc:
    en: |-
      Operating system to use for input-method control.
      Accepts 'macos', 'windows', 'linux', or false for auto-detection.
    ja:

os_settings:
  __desc:
    en: OS-specific settings for input-method commands and mappings.
    ja:

  macos:
    enable:
      __default: true
      __desc:
        en: Enable macOS-specific input-method handling.
        ja:

    cmd_get:
      __default: 'im-select'
      __desc:
        en: Command to get the current input method ID.
        ja:

    cmd_set:
      __default: 'im-select %s'
      __desc:
        en: Command to set a new input method (%s will be replaced with the target ID).
        ja:

    normal_input:
      __default: false
      __desc:
        en: |-
          Input method used for Normalize (false = auto-detect).
          Examples:
            normal_input = 'com.apple.keylayout.ABC',
            normal_input = 'com.apple.keylayout.US',
            normal_input = 'com.apple.keylayout.USExtended',
          You can also use a table like this:
            normal_input = { 'com.apple.keylayout.ABC', 'eisu' },
            The first string must match `cmd_get` output; the second is passed to `cmd_set`.
        ja:

    lang_inputs:
      __desc:
        en: |-
          Input methods corresponding to `match.languages`.
          Each entry can also be a table like `normal_input`.
        ja:

      Ru:
        __default: 'com.apple.keylayout.Russian'
        __desc:
          en: Input method ID for Russian.
          ja:

      Ja:
        __default: 'com.apple.inputmethod.Kotoeri.Japanese'
        __desc:
          en: Input method ID for Japanese.
          ja:

      Zh:
        __default: 'com.apple.inputmethod.SCIM.ITABC'
        __desc:
          en: Input method ID for Chinese.
          ja:

      Ko:
        __default: 'com.apple.inputmethod.Korean.2SetKorean'
        __desc:
          en: Input method ID for Korean.
          ja:

  windows:
    enable:
      __default: true
      __desc:
        en: Enable Windows-specific input-method handling.
        ja:

    cmd_get:
      __default: 'im-select.exe'
      __desc:
        en: Command to get the current input method ID.
        ja:

    cmd_set:
      __default: 'im-select.exe %s'
      __desc:
        en: Command to set a new input method (%s will be replaced with the target ID).
        ja:

    normal_input:
      __default: false
      __desc:
        en: |-
          Input method for Normalize (false = auto-detect).
          Example:
            normal_input = '1033', -- US English
        ja:

    lang_inputs:
      __desc:
        en: Input methods corresponding to `match.languages`.
        ja:

      Ru:
        __default: '1049'
        __desc:
          en: Input method ID for Russian.
          ja:

      Ja:
        __default: '1041'
        __desc:
          en: Input method ID for Japanese.
          ja:

      Zh:
        __default: '2052'
        __desc:
          en: Input method ID for Chinese.
          ja:

      Ko:
        __default: '1042'
        __desc:
          en: Input method ID for Korean.
          ja:

  linux:
    enable:
      __default: true
      __desc:
        en: Enable Linux-specific input-method handling.
        ja:

    cmd_get:
      __default: 'ibus engine'
      __desc:
        en: Command to get the current input method ID.
        ja:

    cmd_set:
      __default: 'ibus engine %s'
      __desc:
        en: Command to set a new input method (%s will be replaced with the target ID).
        ja:

    normal_input:
      __default: false
      __desc:
        en: |-
          Input method for Normalize (false = auto-detect).
          Example:
            normal_input = 'xkb:us::eng', -- US English.
        ja:

    lang_inputs:
      __desc:
        en: Input methods corresponding to `match.languages`.
        ja:

      Ru:
        __default: 'xkb:ru::rus'
        __desc:
          en: Input method ID for Russian.
          ja:

      Ja:
        __default: 'mozc-jp'
        __desc:
          en: Input method ID for Japanese.
          ja:

      Zh:
        __default: 'libpinyin'
        __desc:
          en: Input method ID for Chinese.
          ja:

      Ko:
        __default: 'hangul'
        __desc:
          en: Input method ID for Korean.
          ja:

