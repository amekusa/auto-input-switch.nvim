activate:
  __default: true
  __desc:
    en: |-
      Enable the plugin.
      You can toggle it anytime with the `:AutoInputSwitch on|off` command.
    ja:

async:
  __default: false
  __desc:
    en: |-
      Run shell commands (`cmd_get` / `cmd_set`) asynchronously?
      false: Run synchronously (recommended). May cause slight lag if you switch rapidly between Insert and Normal mode.
      true: Run asynchronously. Removes lag but may be less reliable.
    ja:

log:
  __default: false
  __desc:
    en: |-
      Output logs to a file?
      Useful for debugging `cmd_get` / `cmd_set`.
      The log file is cleared every time `setup()` is called.
      Log file path:
        - Linux/macOS: ~/.local/state/nvim/auto-input-switch.log
        - Windows: ~/AppData/Local/nvim-data/auto-input-switch.log
    ja:

prefix:
  __default: "AutoInputSwitch"
  __desc:
    en: |-
      Prefix for command names.
      If you prefer shorter commands, set this (e.g., `AIS`).
    ja:

popup:
  __desc:
    en: When the plugin switches the input method, it can notify you with a popup.
    ja:

  enable:
    __default: true
    __desc:
      en: Show popups?
      ja:

  duration:
    __default: 1500
    __desc:
      en: How long the popup remains visible (milliseconds).
      ja:

  pad:
    __default: true
    __desc:
      en: Add leading and trailing spaces to the popup text.
      ja:

  hl_group:
    __default: "PmenuSel"
    __desc:
      en: Highlight group used for the popup text.
      ja:

  window:
    __desc:
      en: Popup window configuration. See `:h nvim_open_win()`.
      ja:

    border:
      __default: "none"
      __desc:
        en: Border style of the popup window.
        ja:

    zindex:
      __default: 50
      __desc:
        en: Rendering priority (higher values appear above others).
        ja:

    row:
      __default: 1
      __desc:
        en: Horizontal offset of the popup position.
        ja:

    col:
      __default: 0
      __desc:
        en: Vertical offset of the popup position.
        ja:

    relative:
      __default: "cursor"
      __desc:
        en: |-
          Origin of the offsets.
          One of: `editor`, `win`, `cursor`, or `mouse`.
        ja:

    anchor:
      __default: "NW"
      __desc:
        en: |-
          Corner used to anchor the popup.
          'NW': Northwest
          'NE': Northeast
          'SW': Southwest
          'SE': Southeast
        ja:

  labels:
    __desc:
      en: Popup label settings.
      ja:

    normal_input:
      __default: "A"
      __desc:
        en: Popup text for Normalize. Set `false` to disable.
        ja:

    lang_inputs:
      __desc:
        en: Popup texts for Restore and Match.
        ja:
      Ja:
        __default: "あ"
        __desc:
          en: Japanese.
          ja:
      Zh:
        __default: "拼"
        __desc:
          en: Chinese.
          ja:
      Ko:
        __default: "한"
        __desc:
          en: Korean.
          ja:

normalize:
  __desc:
    en: |-
      Outside Insert mode, the plugin can force the input method to Latin.
      This feature is called **Normalize**.
    ja:

  enable:
    __default: true
    __desc:
      en: Enable Normalize?
      ja:

  on:
    __default:
      - "BufLeave"
      - "WinLeave"
      - "FocusGained"
      - "ExitPre"
      - "QuitPre"
    __desc:
      en: |-
        Events that trigger Normalize. See `:h events`.
      ja:

  on_mode_change:
    __default:
      - "[iR]:n"
    __desc:
      en: |-
        Mode transition patterns that trigger Normalize.
        If not `false`, Normalize is triggered by the `ModeChanged` event.
        See:
          - `:h autocmd-pattern`
          - `:h ModeChanged`
          - `:h mode()`
        Default: From Insert/Replace to Normal mode (`[iR]:n`).
      ja:

  filetypes:
    __default: "*"
    __desc:
      en: |-
        Filetypes where Normalize is enabled.
        Example:
          filetypes = { 'markdown', 'text' }
      ja:

  debounce:
    __default: 500
    __desc:
      en: Debounce time in milliseconds to prevent Normalize from firing too frequently.
      ja:

  buf_condition:
    __default: null
    __desc:
      en: |-
        Optional function that decides whether Normalize is enabled for a buffer.
        Called on every buffer creation with the buffer number as an argument.
        Return `true` to enable Normalize for that buffer.

        Example: enable only in listed buffers:
          ```lua
          buf_condition = function(buf)
            return vim.bo[buf].buflisted
          end
          ```
      ja:
restore:
  __desc:
    en: |-
      When Normalize is about to run, the plugin memorizes the current input method.
      The next time you enter Insert or Replace mode, it restores that memorized input method.
      This feature is called **Restore**.
    ja:

  enable:
    __default: true
    __desc:
      en: Enable Restore?
      ja:

  on:
    __default:
      - "FocusGained"
    __desc:
      en: |-
        Events that trigger Restore. See `:h events`.
      ja:

  on_mode_change:
    __default:
      - "n:[iR]"
    __desc:
      en: |-
        Mode transitions that trigger Restore.
        Default: From Normal to Insert/Replace mode.
      ja:

  filetypes:
    __default: "*"
    __desc:
      en: |-
        Filetypes where Restore is enabled.
        Example:
          filetypes = { 'markdown', 'text' }
      ja:

  debounce:
    __default: 500
    __desc:
      en: Debounce time in milliseconds to prevent Restore from firing too frequently.
      ja:

  buf_condition:
    __default: null
    __desc:
      en: |-
        Function that decides whether Restore is enabled for a buffer.
        Called on every buffer creation with the buffer number as an argument.
        By default, it returns `true` only if the buffer is *modifiable*.
        You can overwrite this function with your own, or disable it entirely by setting `false`.
      ja:

  exclude_pattern:
    __default: "[===[[-+a-zA-Z0-9@#$%^&/\\\\¥=~<>(){}\\[\\];:`]]===]"
    __desc:
      en: |-
        Before Restore runs, the plugin checks characters near the cursor.
        If they match this regex pattern, Restore is canceled and the input method is left unchanged.
        Default: matches alphanumeric characters and common punctuation.
        Set `false` to disable this check.
      ja:

match:
  __desc:
    en: |-
      When you enter Insert or Replace mode, the plugin can detect the language of nearby characters
      and switch to the matching input method.
      This feature is called **Match**.
      If Match and Restore trigger at the same time, Match takes priority.
      To avoid confusion, consider disabling Restore if you enable Match.
    ja:

  enable:
    __default: false
    __desc:
      en: Enable Match?
      ja:

  on:
    __default:
      - "FocusGained"
    __desc:
      en: |-
        Events that trigger Match. See `:h events`.
      ja:

  on_mode_change:
    __default:
      - "[nvV]:[iR]"
    __desc:
      en: |-
        Mode transitions that trigger Match.
        Default: From Normal/Visual to Insert/Replace mode.
      ja:

  filetypes:
    __default: "*"
    __desc:
      en: |-
        Filetypes where Match is enabled.
        Example:
          filetypes = { 'markdown', 'text' }
      ja:

  debounce:
    __default: 500
    __desc:
      en: Debounce time in milliseconds to prevent Match from firing too frequently.
      ja:

  buf_condition:
    __default: null
    __desc:
      en: |-
        Function that decides whether Match is enabled for a buffer.
        Called on every buffer creation with the buffer number as an argument.
        By default, it returns `true` only if the buffer is *modifiable*.
        You can overwrite this function with your own, or disable it entirely by setting `false`.
      ja:

  languages:
    __desc:
      en: |-
        Languages to detect.
        Each language entry must define a valid regex `pattern` (using Unicode ranges).
        You can also add custom languages—if you do, make sure to add their input methods to `os_settings[OS].lang_inputs`.
      ja:

    Ru:
      enable:
        __default: false
        __desc:
          en: Enable Russian detection?
          ja:
      priority:
        __default: 0
        __desc:
          en: Priority number for resolving overlapping language patterns.
          ja:
      pattern:
        __default: "[\\\\u0400-\\\\u04ff]"
        __desc:
          en: Regex range for Cyrillic (Russian) characters.
          ja:

    Ja:
      enable:
        __default: false
        __desc:
          en: Enable Japanese detection?
          ja:
      priority:
        __default: 0
        __desc:
          en: Priority number for resolving overlapping language patterns.
          ja:
      pattern:
        __default: "[\\\\u3000-\\\\u30ff\\\\uff00-\\\\uffef\\\\u4e00-\\\\u9fff]"
        __desc:
          en: Regex ranges for Japanese characters (Kana, Kanji, full-width forms).
          ja:

    Zh:
      enable:
        __default: false
        __desc:
          en: Enable Chinese detection?
          ja:
      priority:
        __default: 0
        __desc:
          en: Priority number for resolving overlapping language patterns.
          ja:
      pattern:
        __default: "[\\\\u3000-\\\\u303f\\\\u4e00-\\\\u9fff\\\\u3400-\\\\u4dbf\\\\u3100-\\\\u312f]"
        __desc:
          en: Regex ranges for Chinese characters (CJK, Bopomofo, punctuation).
          ja:

    Ko:
      enable:
        __default: false
        __desc:
          en: Enable Korean detection?
          ja:
      priority:
        __default: 0
        __desc:
          en: Priority number for resolving overlapping language patterns.
          ja:
      pattern:
        __default: "[\\\\u3000-\\\\u303f\\\\u1100-\\\\u11ff\\\\u3130-\\\\u318f\\\\uac00-\\\\ud7af]"
        __desc:
          en: Regex ranges for Hangul characters.
          ja:

  lines:
    __desc:
      en: |-
        Controls how many lines are scanned for language detection if the current line is empty or whitespace.
      ja:
    above:
      __default: 1
      __desc:
        en: Number of lines above the cursor to search.
        ja:
    below:
      __default: 1
      __desc:
        en: Number of lines below the cursor to search.
        ja:
    exclude_pattern:
      __default: "^\\s*\\%([-+*:|>]\\|[0-9]\\+\\.\\)\\s"
      __desc:
        en: |-
          If any surrounding line matches this regex, language detection stops and the input method is left unchanged.
          Useful for lists, tables, or blockquotes in Markdown.
          Set `false` to disable.
        ja:

os:
  __default: false
  __desc:
    en: |-
      Operating system to use for input-method control.
      Accepts `'macos'`, `'windows'`, `'linux'`, or `false` for auto-detection.
    ja:

os_settings:
  __desc:
    en: |-
      OS-specific settings for input-method commands and mappings.
    ja:

  macos:
    enable:
      __default: true
      __desc:
        en: Enable macOS-specific input-method handling.
        ja:
    cmd_get:
      __default: "im-select"
      __desc:
        en: Command to get the current input method.
        ja:
    cmd_set:
      __default: "im-select %s"
      __desc:
        en: Command to set a new input method (`%s` will be replaced with the target ID).
        ja:
    normal_input:
      __default: false
      __desc:
        en: |-
          Input method used for Normalize (`false` = auto-detect).
          Examples:
            - com.apple.keylayout.ABC
            - com.apple.keylayout.US
            - com.apple.keylayout.USExtended
          You can also use a table:
            { "com.apple.keylayout.ABC", "eisu" }
          The first string must match `cmd_get` output; the second is passed to `cmd_set`.
        ja:
    lang_inputs:
      __desc:
        en: |-
          Input methods corresponding to `match.languages`.
          Each entry can also be a table like `normal_input`.
        ja:
      Ru:
        __default: "com.apple.keylayout.Russian"
        __desc:
          en: Input method ID for Russian.
          ja:
      Ja:
        __default: "com.apple.inputmethod.Kotoeri.Japanese"
        __desc:
          en: Input method ID for Japanese.
          ja:
      Zh:
        __default: "com.apple.inputmethod.SCIM.ITABC"
        __desc:
          en: Input method ID for Simplified Chinese (Pinyin).
          ja:
      Ko:
        __default: "com.apple.inputmethod.Korean.2SetKorean"
        __desc:
          en: Input method ID for Korean (2-Set).
          ja:

  windows:
    enable:
      __default: true
      __desc:
        en: Enable Windows-specific input-method handling.
        ja:
    cmd_get:
      __default: "im-select.exe"
      __desc:
        en: Command to get the current input method (IME layout code).
        ja:
    cmd_set:
      __default: "im-select.exe %s"
      __desc:
        en: Command to set a new input method (`%s` will be replaced with the layout code).
        ja:
    normal_input:
      __default: false
      __desc:
        en: |-
          Input method for Normalize (`false` = auto-detect).
          Example: `"1033"` for US English.
        ja:
    lang_inputs:
      __desc:
        en: Input-method layout codes corresponding to `match.languages`.
        ja:
      Ru:
        __default: "1049"
        __desc:
          en: Layout code for Russian.
          ja:
      Ja:
        __default: "1041"
        __desc:
          en: Layout code for Japanese IME.
          ja:
      Zh:
        __default: "2052"
        __desc:
          en: Layout code for Simplified Chinese IME.
          ja:
      Ko:
        __default: "1042"
        __desc:
          en: Layout code for Korean IME.
          ja:

  linux:
    enable:
      __default: true
      __desc:
        en: Enable Linux-specific input-method handling.
        ja:
    cmd_get:
      __default: "ibus engine"
      __desc:
        en: Command to get the current IBus engine name.
        ja:
    cmd_set:
      __default: "ibus engine %s"
      __desc:
        en: Command to set a new IBus engine (`%s` will be replaced with the engine name).
        ja:
    normal_input:
      __default: false
      __desc:
        en: |-
          Input method for Normalize (`false` = auto-detect).
          Example: `"xkb:us::eng"` for US English.
        ja:
    lang_inputs:
      __desc:
        en: IBus engine names corresponding to `match.languages`.
        ja:
      Ru:
        __default: "xkb:ru::rus"
        __desc:
          en: IBus engine for Russian.
          ja:
      Ja:
        __default: "mozc-jp"
        __desc:
          en: IBus engine for Japanese (Mozc).
          ja:
      Zh:
        __default: "libpinyin"
        __desc:
          en: IBus engine for Chinese (Pinyin).
          ja:
      Ko:
        __default: "hangul"
        __desc:
          en: IBus engine for Korean (Hangul).
          ja:

